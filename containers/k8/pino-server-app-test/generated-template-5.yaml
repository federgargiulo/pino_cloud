---
# Source: pino-server-app-v5/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pino-server-app-v5-config
data:
  application_prod.yml: |
    pliot:
      keycloak:
        url: "https://pinocloud.duckdns.org:8081"
        realmName: "master"
        realmManaged: "pliot"
        webClientId: "pl_server"
        user: "admin"
        password: "4%VtlGbS)54\"}.l0A,rW:VAs*-0$/=+3zXYpT*-C<.4isbV6$2"
        clientId: "admin-cli"
      edge:
        tokenuri:
        client-id:
        client-secret:
        api-url:
      server:
        url: "http://localhost:8080"
      base_path:
    
    logging:
      file:
        path: ./log
    
    springdoc:
      swagger-ui:
        path: "api-docs.html"
    
    #jms:
     #  jndi-name: "java:/MyConnectionFactory"
    
    
    
    spring:
      activemq:
        broker-url: "tcp://localhost:9876"
        user: "admin"
        password: "secret"
        pool:
          enabled: true
          max-connections: 10
      artemis:
        mode: native
        host: localhost
        port: 9876
        user: admin
        password: secret
    
    #
    #   jwk-set-uri: ${KEYCLOAK_URL}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/certs
    #          issuer-uri: ${KEYCLOAK_URL}/realms/${KEYCLOAK_REALM}
    # https://hawt.io/docs/get-started.html
    #
    
      jmx:
        enabled: true
    
      datasource:
        url: jdbc:postgresql://pino-db-app-v2.8f0c1d24-deea-468d-9a60-8bdc22a7a1ca.svc.cluster.local:5432/postgres
        username: pino
        password: G1us3pp3
    #H2
    #    url: jdbc:h2:file:./equipment
    #    username: sa
    #    password: password
    #    driverClassName: org.h2.Driver
      jpa:
    #    dialect: org.hibernate.dialect.H2Dialect
        dialect: org.hibernate.dialect.PostgreSQLDialect
        properties:
          hibernate:
            format_sql=true:
        hibernate:
          ddl-auto: update
        show-sql: true
      h2:
        console:
          enabled: true
    
    
    #
    # Postgres
    #
    #spring:
    # datasource:
    #    url: jdbc:postgresql://localhost:25432/test
    #    username: postgres
    #    password: postgres
    #  jpa:
    #     hibernate: create
    #      # <create | create-drop | update | validate | none>
    
    #      ddl-auto: create
    #    properties:
    #      hibernate:
    #        dialect: org.hibernate.dialect.PostgreSQLDialect
      security:
        oauth2:
          resourceserver:
            jwt:
              jwk-set-uri: ${pliot.keycloak.url}/realms/${pliot.keycloak.realmManaged}/protocol/openid-connect/certs
              issuer-uri: ${pliot.keycloak.url}/realms/${pliot.keycloak.realmManaged}
    
    server:
      port: 8080
      #ssl:
      #  enabled: true
      #  certificate: ./config/fullchain.pem
      #  certificate-private-key: ./config/privkey.pem
    
    
    management:
      endpoints:
        web:
          exposure:
            include: hawtio,jolokia
          base-path: "/actuator"
          path-mapping:
            hawtio: "hawtio/console"
      management:
        security:
          enabled: false
    
    hawtio:
      authenticationEnabled: false
---
# Source: pino-server-app-v5/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pino-server-app-v5
  labels:
    app.kubernetes.io/name: pino-server-app-v5
    helm.sh/chart: pino-server-app-v5-1.0.0
    app.kubernetes.io/instance: pino-server-app-v5
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    external-dns.alpha.kubernetes.io/hostname: pino-server-app-v5.workload.nemo.onelab.eu
    nemo.eu/ingress-expose: "true"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: pino-server-app-v5
    app.kubernetes.io/instance: pino-server-app-v5
---
# Source: pino-server-app-v5/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pino-server-app-v5
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pino-server-app-v5
  template:
    metadata:
      labels:
        app: pino-server-app-v5
    spec:
      containers:
        - name: pino-server-app-v5
          image: "cogitoprediction/nemo_pino:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: JAVA_OPTS
              value: "-Dspring.profiles.active=server"
            - name: SPRING_OPTS
              value: "--spring.config.location=/app/config/application_prod.yml"
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            - name: logs-volume
              mountPath: /app/logs
      volumes:
        - name: config-volume
          configMap:
            name: pino-server-app-v5-config
        - name: logs-volume
          emptyDir: {}
---
# Source: pino-server-app-v5/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pino-server-app-v5
  labels:
    app.kubernetes.io/name: pino-server-app-v5
    helm.sh/chart: pino-server-app-v5-1.0.0
    app.kubernetes.io/instance: pino-server-app-v5
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    external-dns.alpha.kubernetes.io/hostname: pino-server-app-v5.workload.nemo.onelab.eu
    nemo.eu/ingress-expose: "true"
spec:
  rules:
    - host: "pino-server-app-v5.workload.nemo.onelab.eu"
      http:
        paths:
          - path: map[path:/ pathType:ImplementationSpecific]
            backend:
              serviceName: pino-server-app-v5
              servicePort: http
